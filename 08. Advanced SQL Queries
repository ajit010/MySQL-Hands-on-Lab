// ADVANCED SQL QUERIES //


Subqueries and Nested Queries
Subqueries, also known as nested queries, are queries within a query. They are used to perform operations that require multiple steps of logic or data manipulation.

Types of Subqueries:

Scalar Subqueries: Return a single value.
Column Subqueries: Return a single column of values.
Row Subqueries: Return a single row of values.
Table Subqueries: Return a table of values.
Example:

Scalar Subquery:
Find employees whose salary is above the average salary:

sql
Copy code
SELECT name, salary
FROM employees
WHERE salary > (SELECT AVG(salary) FROM employees);
Column Subquery:
List all departments with employees older than 30 years:

sql
Copy code
SELECT department_name
FROM departments
WHERE id IN (SELECT department_id FROM employees WHERE age > 30);
Row Subquery:
Find the employee with the highest salary:

sql
Copy code
SELECT name, salary
FROM employees
WHERE (salary, id) = (SELECT MAX(salary), id FROM employees);
Table Subquery:
List employees and their departments (alternative to join):

sql
Copy code
SELECT e.name, e.salary, d.department_name
FROM employees e, (SELECT id, department_name FROM departments) d
WHERE e.department_id = d.id;
Common Table Expressions (CTEs)
Common Table Expressions (CTEs) are temporary result sets that can be referenced within a SELECT, INSERT, UPDATE, or DELETE statement. They are defined using the WITH clause.

Syntax:

sql
Copy code
WITH cte_name AS (
    SELECT statement
)
SELECT * FROM cte_name;
Example:

Simple CTE:
Calculate the average salary and list employees earning more than the average:

sql
Copy code
WITH AverageSalary AS (
    SELECT AVG(salary) AS avg_salary FROM employees
)
SELECT name, salary
FROM employees, AverageSalary
WHERE employees.salary > AverageSalary.avg_salary;
Recursive CTE:
Generate a series of numbers from 1 to 10:

sql
Copy code
WITH RECURSIVE numbers AS (
    SELECT 1 AS num
    UNION ALL
    SELECT num + 1 FROM numbers WHERE num < 10
)
SELECT * FROM numbers;
Window Functions
Window Functions perform calculations across a set of table rows related to the current row. Unlike aggregate functions, window functions do not cause rows to become grouped into a single output row.

Syntax:

sql
Copy code
SELECT column_name, window_function() OVER (partition_by_clause order_by_clause) AS alias
FROM table_name;
Example:

ROW_NUMBER:
Assign a unique number to each row within a partition of a result set:

sql
Copy code
SELECT name, department_id, salary,
       ROW_NUMBER() OVER (PARTITION BY department_id ORDER BY salary DESC) AS row_num
FROM employees;
RANK:
Assign a rank to each row within a partition of a result set:

sql
Copy code
SELECT name, department_id, salary,
       RANK() OVER (PARTITION BY department_id ORDER BY salary DESC) AS rank
FROM employees;
LEAD and LAG:
Access data from the next row (LEAD) or previous row (LAG) in the result set:

sql
Copy code
SELECT name, salary,
       LAG(salary, 1) OVER (ORDER BY salary) AS previous_salary,
       LEAD(salary, 1) OVER (ORDER BY salary) AS next_salary
FROM employees;
Advanced Filtering and Search Techniques (LIKE, REGEXP)
LIKE and REGEXP are used for pattern matching in SQL.

LIKE:
Used to search for a specified pattern in a column.

Syntax:

sql
Copy code
SELECT column_name
FROM table_name
WHERE column_name LIKE pattern;
Example:
Find employees whose name starts with 'A':

sql
Copy code
SELECT name
FROM employees
WHERE name LIKE 'A%';
REGEXP:
Provides more powerful pattern matching than LIKE using regular expressions.

Syntax:

sql
Copy code
SELECT column_name
FROM table_name
WHERE column_name REGEXP pattern;
Example:
Find employees whose name contains 'a' or 'e':

sql
Copy code
SELECT name
FROM employees
WHERE name REGEXP '[ae]';
Advanced Examples:

LIKE with Wildcards:

% matches any sequence of characters (including zero characters).
_ matches any single character.
sql
Copy code
SELECT name
FROM employees
WHERE name LIKE 'J%n'; -- Names starting with 'J' and ending with 'n'
REGEXP with Patterns:

. matches any single character.
* matches zero or more occurrences of the preceding character.
^ matches the start of a string.
$ matches the end of a string.
sql
Copy code
SELECT name
FROM employees
WHERE name REGEXP '^A'; -- Names starting with 'A'



===============================================================================================================================================================
===============================================================================================================================================================

