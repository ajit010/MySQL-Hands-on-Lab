Installation of MySQL in Windows :

Go to https://dev.mysql.com/downloads/ 

Download MySQL Community Server and MySQL Workbench

Install MySQL server using recommended options...

Set 'root' user password and save it at someplace (you will be required at login everytime)

Once Installation is complete ... Go to MySQL command-line client to execute commands ...

You can also use MySQL Workbench (GUI) to create table and insert data, execute queries etc.


MySQL Commands reference - https://gist.github.com/hofmannsven/9164408


(For Linux bash terminal)

Access monitor: mysql -u [username] -p; (will prompt for password)

Show all databases: show databases;

Access database: mysql -u [username] -p [database] (will prompt for password)



Commands to use in MySQL CLI :-
(Commands are case-insensitive in Windows, you can use create instead of CREATE or SHOW instead of show, both will work.....but these commands are case-sensitive in Linux)


1. Creating a new database -

CREATE DATABASE my_database;

2. Using a database -

USE my_database;

3. Show all databases -

SHOW databases;

4. Determine what database is in use -

SELECT database();

5. Show all tables -

SHOW tables;

6. Show table structure - 

DESCRIBE [table];

7. List all indexes on a table -

SHOW index from [table];

8. Creating a new table with columns -

CREATE TABLE [table] ([column] VARCHAR(120), [another-column] DATETIME);

Example :  

CREATE TABLE users (
  id INT AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(100),
  email VARCHAR(100)
);

9. Inserting data -

INSERT INTO [table] ([column], [column]) VALUES ('[value]', '[value]');

Example :

INSERT INTO users (name, email) VALUES ('John Doe', 'john@example.com');

IMPORTANT NOTE --

Implementation of MySQL INSERT Statement To Add Multiple Rows

CREATE TABLE demotable(  
StudID int, S_Name varchar(100), S_Course varchar (50) );  


INSERT INTO demotable VALUES (1, 'AMAN', 'Mathematics'),  
 (2, 'HARSH', 'Mathematics'),  
(3, 'RAHUL', 'Computer Science'),  
(4, 'ROHIT', 'English'),  
(5, 'VIJAY', 'Science'); 


SELECT * FROM demotable;  


10. Querying data -

SELECT * FROM users;

11. 

Data Definition Language (DDL): Defines the structure of the database.

CREATE: Creates new database objects (e.g., tables, indexes).
ALTER: Modifies existing database objects.
DROP: Deletes database objects.CREAT, ALTER and DROP Usage -

CREATE TABLE products (
  id INT AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(50),
  price DECIMAL(10, 2)
);

12.

Data Manipulation Language (DML): Manages data within database objects.

SELECT: Retrieves data from the database.
INSERT: Adds new data to the database.
UPDATE: Modifies existing data.
DELETE: Removes data from the database.

-- Selecting data
SELECT * FROM products;

-- Inserting data
INSERT INTO products (name, price) VALUES ('Laptop', 999.99);

-- Updating data
UPDATE products SET price = 899.99 WHERE name = 'Laptop';

-- Deleting data
DELETE FROM products WHERE name = 'Laptop';


13.

Data Control Language (DCL): Controls access to data.

GRANT: Gives user access privileges.
REVOKE: Removes user access privileges.


GRANT ALL PRIVILEGES ON my_database.* TO 'user'@'localhost';


14. Switch to a different user in MySQL -

SYSTEM mysql -u user -p

15. List of users in MySQL -

 SELECT user FROM mysql.user;

16. Check current user in MySQL -

SELECT user();

17. Creating a new user and granting full privileges -

CREATE USER 'new_user'@'localhost' IDENTIFIED BY 'password';

GRANT ALL PRIVILEGES ON * . * TO 'new_user'@'localhost';

18. 

Transaction Control Language (TCL): Manages transactions.

COMMIT: Saves all changes made in the current transaction.
ROLLBACK: Undoes all changes made in the current transaction.

START TRANSACTION;
UPDATE products SET price = 799.99 WHERE name = 'Laptop';
COMMIT;   -- or ROLLBACK;


19. Data-Types -

Example :

CREATE TABLE employees (
  id INT AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(100),
  age INT,
  salary DECIMAL(10, 2),
  hire_date DATE,
  last_login TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


20. Creating and Modifying Tables

Creating Table -

CREATE TABLE students (
  student_id INT AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(100),
  age INT,
  enrollment_date DATE
);


Modify Table -


Adding a new column:

ALTER TABLE students ADD COLUMN email VARCHAR(100);

Modifying an existing column:

ALTER TABLE students MODIFY COLUMN age TINYINT;

Dropping a column:

ALTER TABLE students DROP COLUMN email;


Dropping a Table :

DROP TABLE students;


21. Database Schema :

Schema Components:

Tables: Store data in rows and columns.
Views: Virtual tables based on the result of a SELECT query.
Indexes: Improve the speed of data retrieval operations.
Stored Procedures: Reusable SQL code.
Triggers: Execute actions in response to events on a table.


Example:
Consider a schema for an e-commerce application:

Create the database:

CREATE DATABASE ecommerce;
USE ecommerce;

Create tables:

CREATE TABLE products (
  product_id INT AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(100),
  price DECIMAL(10, 2),
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE customers (
  customer_id INT AUTO_INCREMENT PRIMARY KEY,
  first_name VARCHAR(100),
  last_name VARCHAR(100),
  email VARCHAR(100) UNIQUE
);

CREATE TABLE orders (
  order_id INT AUTO_INCREMENT PRIMARY KEY,
  customer_id INT,
  order_date DATETIME DEFAULT CURRENT_TIMESTAMP,
  total DECIMAL(10, 2),
  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
);


Create a view:

CREATE VIEW order_summary AS
SELECT o.order_id, c.first_name, c.last_name, o.total, o.order_date
FROM orders o
JOIN customers c ON o.customer_id = c.customer_id;


Create an index:

CREATE INDEX idx_product_name ON products(name);


Create a stored procedure:

CREATE PROCEDURE GetCustomerOrders (IN customer_id INT)
BEGIN
  SELECT * FROM orders WHERE customer_id = customer_id;
END;


Create a trigger:

CREATE TRIGGER before_order_insert
BEFORE INSERT ON orders
FOR EACH ROW
BEGIN
  DECLARE product_count INT;
  SELECT COUNT(*) INTO product_count FROM products WHERE product_id = NEW.product_id;
  IF product_count = 0 THEN
    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Product does not exist';
  END IF;
END;


22. Basic SQL Operations -

Inserting Data:
The INSERT INTO statement is used to add new rows of data to a table.

Syntax:

INSERT INTO table_name (column1, column2, column3, ...)
VALUES (value1, value2, value3, ...);


Example:
Consider a table employees with columns id, name, age, and department.


Creating the table:


CREATE TABLE employees (
  id INT AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(100),
  age INT,
  department VARCHAR(50)
);


Inserting data:


INSERT INTO employees (name, age, department)
VALUES ('Alice', 30, 'HR');

INSERT INTO employees (name, age, department)
VALUES ('Bob', 25, 'Engineering');


Inserting multiple rows:

INSERT INTO employees (name, age, department)
VALUES ('Charlie', 28, 'Finance'),
       ('Diana', 35, 'Engineering'),
       ('Eve', 22, 'HR');


Querying Data (SELECT Statements)
The SELECT statement is used to retrieve data from one or more tables.

Syntax:

SELECT column1, column2, ...
FROM table_name;


Example:

SELECT name, age, department
FROM employees;


To select all columns:

SELECT * FROM employees;



Filtering Data (WHERE Clause)
The WHERE clause is used to filter records based on specific conditions.

Syntax:

SELECT column1, column2, ...
FROM table_name
WHERE condition;


Example:

1. Basic filtering:

SELECT name, age
FROM employees
WHERE department = 'Engineering';


2. Using comparison operators:

SELECT name, age
FROM employees
WHERE age > 30;

3. Combining conditions with AND/OR:

SELECT name, department
FROM employees
WHERE age > 25 AND department = 'HR';


SELECT name, department
FROM employees
WHERE age < 25 OR department = 'Engineering';


4. Using IN and BETWEEN:

SELECT name
FROM employees
WHERE department IN ('Engineering', 'HR');


SELECT name, age
FROM employees
WHERE age BETWEEN 25 AND 35;



Sorting Data (ORDER BY Clause) -
The ORDER BY clause is used to sort the result set by one or more columns.

Syntax:

SELECT column1, column2, ...
FROM table_name
ORDER BY column1 [ASC|DESC], column2 [ASC|DESC], ...;


Example:

1. Sorting in ascending order:

SELECT name, age, department
FROM employees
ORDER BY age ASC;


2. Sorting in descending order:

SELECT name, age, department
FROM employees
ORDER BY age DESC;


3. Sorting by multiple columns:

SELECT name, age, department
FROM employees
ORDER BY department ASC, age DESC;



Updating Data
The UPDATE statement is used to modify existing records in a table.

Syntax:

UPDATE table_name
SET column1 = value1, column2 = value2, ...
WHERE condition;


Example:

1. Updating a single record:

UPDATE employees
SET age = 32
WHERE name = 'Alice';


2. Updating multiple records:

UPDATE employees
SET department = 'Operations'
WHERE department = 'HR';



Deleting Data
The DELETE statement is used to remove existing records from a table.

Syntax:

DELETE FROM table_name
WHERE condition;


Example:

1. Deleting a single record:

DELETE FROM employees
WHERE name = 'Bob';


2. Deleting multiple records:

DELETE FROM employees
WHERE department = 'Finance';


Note: Be careful with the DELETE statement without a WHERE clause, as it will delete all records in the table.

DELETE FROM employees;  -- This deletes all records in the employees table


