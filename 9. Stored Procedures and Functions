// STORED PROCEDURES and FUNCTIONS //


Stored Procedures
A Stored Procedure is a set of SQL statements that can be stored and reused. It allows you to encapsulate complex business logic in the database, making it reusable and easier to maintain.

Creating a Stored Procedure:

Syntax:

sql
Copy code
CREATE PROCEDURE procedure_name (parameters)
BEGIN
    -- SQL statements
END;
Example:
Create a stored procedure to get employees by department:

sql
Copy code
CREATE PROCEDURE GetEmployeesByDepartment(IN dept_id INT)
BEGIN
    SELECT * FROM employees WHERE department_id = dept_id;
END;
Using a Stored Procedure:

Syntax:

sql
Copy code
CALL procedure_name(parameters);
Example:
Call the GetEmployeesByDepartment procedure:

sql
Copy code
CALL GetEmployeesByDepartment(1);
Stored Functions
A Stored Function is similar to a stored procedure, but it returns a single value. Functions can be used in SQL statements wherever expressions are allowed.

Creating a Stored Function:

Syntax:

sql
Copy code
CREATE FUNCTION function_name (parameters)
RETURNS return_datatype
BEGIN
    -- SQL statements
    RETURN return_value;
END;
Example:
Create a function to calculate the annual salary:

sql
Copy code
CREATE FUNCTION CalculateAnnualSalary(monthly_salary DECIMAL(10,2))
RETURNS DECIMAL(10,2)
BEGIN
    RETURN monthly_salary * 12;
END;
Using a Stored Function:

Syntax:

sql
Copy code
SELECT function_name(parameters);
Example:
Use the CalculateAnnualSalary function:

sql
Copy code
SELECT name, CalculateAnnualSalary(salary) AS annual_salary FROM employees;
Parameters and Return Types
Parameters:

IN: Input parameter (default). The value is passed into the procedure.
OUT: Output parameter. The procedure passes the value back.
INOUT: Input and output parameter. The value is passed in and can be modified and passed back.
Syntax:

sql
Copy code
CREATE PROCEDURE procedure_name (IN param1 datatype, OUT param2 datatype, INOUT param3 datatype)
BEGIN
    -- SQL statements
END;
Example:
Create a procedure to update salary and return the new salary:

sql
Copy code
CREATE PROCEDURE UpdateSalary(IN emp_id INT, IN salary_increase DECIMAL(10,2), OUT new_salary DECIMAL(10,2))
BEGIN
    UPDATE employees
    SET salary = salary + salary_increase
    WHERE id = emp_id;
    
    SELECT salary INTO new_salary
    FROM employees
    WHERE id = emp_id;
END;
Call the UpdateSalary procedure:

sql
Copy code
CALL UpdateSalary(1, 500.00, @new_salary);
SELECT @new_salary;
Return Types for Functions:
Functions must return a single value of the specified datatype.

Example:
Create a function to get the department name by employee ID:

sql
Copy code
CREATE FUNCTION GetDepartmentName(emp_id INT)
RETURNS VARCHAR(100)
BEGIN
    DECLARE dept_name VARCHAR(100);
    SELECT d.department_name INTO dept_name
    FROM employees e
    JOIN departments d ON e.department_id = d.id
    WHERE e.id = emp_id;
    RETURN dept_name;
END;
Use the GetDepartmentName function:

sql
Copy code
SELECT name, GetDepartmentName(id) AS department FROM employees;
Error Handling in Stored Procedures
Error handling in MySQL stored procedures can be done using the DECLARE statement to declare handlers for specific conditions.

Syntax:

sql
Copy code
DECLARE handler_type HANDLER FOR condition_value statement;
handler_type:

CONTINUE: The procedure continues execution after the handler is executed.
EXIT: The procedure exits after the handler is executed.
condition_value:

SQLSTATE 'value': Handles SQLSTATE error codes.
SQLWARNING: Handles all SQL warnings.
NOT FOUND: Handles NOT FOUND conditions.
SQLEXCEPTION: Handles all SQL errors.
Example:
Create a procedure with error handling for division by zero:

sql
Copy code
CREATE PROCEDURE SafeDivision(IN numerator DECIMAL(10,2), IN denominator DECIMAL(10,2), OUT result DECIMAL(10,2))
BEGIN
    DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
    SET result = NULL;
    
    IF denominator = 0 THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Division by zero error';
    ELSE
        SET result = numerator / denominator;
    END IF;
END;
Call the SafeDivision procedure:

sql
Copy code
CALL SafeDivision(10, 2, @result);  -- @result will be 5.00
SELECT @result;

CALL SafeDivision(10, 0, @result);  -- @result will be NULL due to division by zero
SELECT @result;


==============================================================================================================================================================
==============================================================================================================================================================

