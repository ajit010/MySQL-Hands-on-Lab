// HANDS-ON LAB and Q&A //


Hands-on Lab
In this hands-on lab, you'll perform practical exercises based on the topics we've covered. These exercises will reinforce your understanding of MySQL features and their applications.

Practical Exercises:

Setting up Replication (Master-Slave):

Step 1: Configure the Master Server

Edit the my.cnf file on the master server:
ini
Copy code
[mysqld]
server-id=1
log-bin=mysql-bin
Restart the MySQL service:
bash
Copy code
sudo systemctl restart mysql
Create a replication user:
sql
Copy code
CREATE USER 'replica'@'%' IDENTIFIED BY 'replica_password';
GRANT REPLICATION SLAVE ON *.* TO 'replica'@'%';
FLUSH PRIVILEGES;
Obtain the current log file and position:
sql
Copy code
SHOW MASTER STATUS;
Step 2: Configure the Slave Server

Edit the my.cnf file on the slave server:
ini
Copy code
[mysqld]
server-id=2
Restart the MySQL service:
bash
Copy code
sudo systemctl restart mysql
Set up the slave to replicate from the master:
sql
Copy code
CHANGE MASTER TO
  MASTER_HOST='master_ip',
  MASTER_USER='replica',
  MASTER_PASSWORD='replica_password',
  MASTER_LOG_FILE='mysql-bin.000001',  -- Replace with the log file from master
  MASTER_LOG_POS=120;  -- Replace with the log position from master
START SLAVE;
Verify the slave status:
sql
Copy code
SHOW SLAVE STATUS\G;
Creating a Backup Using mysqldump:

Perform a full backup of the database:
bash
Copy code
mysqldump -u root -p mydb > mydb_backup.sql
Restore the backup to a new database:
bash
Copy code
mysql -u root -p newdb < mydb_backup.sql
Creating and Using Stored Procedures:

Create a stored procedure to insert a new record:
sql
Copy code
DELIMITER //
CREATE PROCEDURE AddCustomer(IN name VARCHAR(100), IN email VARCHAR(100))
BEGIN
  INSERT INTO customers (name, email) VALUES (name, email);
END //
DELIMITER ;
Call the stored procedure:
sql
Copy code
CALL AddCustomer('John Doe', 'john.doe@example.com');
Creating an Index:

Create an index on the email column of the customers table:
sql
Copy code
CREATE INDEX idx_email ON customers (email);
Verify the index creation:
sql
Copy code
SHOW INDEX FROM customers;
Running an Advanced Query with a Subquery:

Find customers who have placed orders in the last 30 days:
sql
Copy code
SELECT name, email FROM customers
WHERE id IN (
  SELECT customer_id FROM orders
  WHERE order_date > CURDATE() - INTERVAL 30 DAY
);
Real-World Scenarios and Problem-Solving
Scenario 1: Handling High Traffic

You have an e-commerce website with increasing traffic, causing database performance issues. Implement replication and load balancing to handle the load.

Steps:

Set up master-slave replication to distribute read queries to the slave.
Use a load balancer (like ProxySQL) to manage traffic distribution between master and slave.
Example:

Configure ProxySQL to distribute read queries:
ini
Copy code
admin_credentials="admin:admin"
mysql_servers = (
  { address="master_ip", port=3306, weight=1 },
  { address="slave_ip", port=3306, weight=2 }
)
mysql_users = (
  { username="user", password="password", default_hostgroup=0 }
)
mysql_query_rules = (
  { rule_id=1, match_pattern="^SELECT .*", destination_hostgroup=1 }
)
Scenario 2: Data Loss Recovery

Your database suffered data loss due to a hardware failure. Implement a backup and restore strategy to recover the lost data.

Steps:

Perform regular backups using mysqldump or a similar tool.
Use a slave server for backups to minimize impact on the master.
Example:

Schedule a daily backup using a cron job:
bash
Copy code
0 2 * * * /usr/bin/mysqldump -u root -p mydb > /backups/mydb_backup_$(date +\%F).sql
Scenario 3: Query Optimization

Your queries are running slow, impacting the performance of your application. Optimize queries and use indexes to improve performance.

Steps:

Analyze slow queries using the slow query log.
Create indexes on frequently queried columns.
Rewrite complex queries for better performance.
Example:

Enable and analyze the slow query log:
ini
Copy code
[mysqld]
slow_query_log = 1
slow_query_log_file = /var/log/mysql/slow-query.log
long_query_time = 2
sql
Copy code
SHOW VARIABLES LIKE 'slow_query_log%';
Optimize a slow query by adding an index:
sql
Copy code
CREATE INDEX idx_order_date ON orders (order_date);
Open Q&A Session
Use this time to address specific questions and challenges faced by the participants. Encourage them to share their experiences and ask about any difficulties they encountered during the hands-on lab.

Example Questions:

Q: How do you handle replication lag in a high-traffic environment?

A: Monitor the Seconds_Behind_Master metric and optimize the master to reduce load. Use tools like pt-heartbeat to monitor and address lag.
Q: What are the best practices for securing MySQL?

A: Use strong passwords, limit user privileges, enable SSL for encrypted connections, and keep the MySQL server updated with security patches.
Q: How do you troubleshoot a slave server that is not replicating?

A: Check the slave status using SHOW SLAVE STATUS\G; and resolve any errors shown in the Last_Error field. Ensure network connectivity and correct user credentials.
Q: Can you explain the difference between a primary key and a unique key?

A: A primary key uniquely identifies each row in a table and cannot contain NULL values. A unique key also ensures uniqueness but can contain NULL values and multiple unique keys can exist in a table.
By the end of this session, participants should have a solid understanding of practical MySQL operations, replication setups, backup strategies, and optimization techniques. 
They should also feel confident in troubleshooting common issues and applying these skills in real-world scenarios.



=================================================================================================================================================================
=================================================================================================================================================================
