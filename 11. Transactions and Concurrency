// TRANSACTIONS and CONCURRENCY //


Understanding Transactions
A transaction is a sequence of one or more SQL operations treated as a single unit of work. Transactions ensure that the operations either all succeed or all fail, maintaining the integrity and consistency of the database.

Properties of Transactions (ACID):

Atomicity: Ensures that all operations within a transaction are completed successfully; if not, the transaction is aborted.
Consistency: Ensures that the database changes state only if the transaction is successful.
Isolation: Ensures that transactions are securely and independently processed at the same time without interference.
Durability: Ensures that once a transaction is committed, it remains so, even in the event of a system failure.
Example:
Consider a banking system where we need to transfer money from one account to another.

sql
Copy code
START TRANSACTION;

UPDATE accounts
SET balance = balance - 100
WHERE account_id = 1;

UPDATE accounts
SET balance = balance + 100
WHERE account_id = 2;

COMMIT;
COMMIT and ROLLBACK
COMMIT: Saves the changes made during the transaction to the database.
ROLLBACK: Reverts the changes made during the transaction, undoing all operations performed since the transaction began.

Example:

Using COMMIT:

sql
Copy code
START TRANSACTION;

UPDATE accounts
SET balance = balance - 100
WHERE account_id = 1;

UPDATE accounts
SET balance = balance + 100
WHERE account_id = 2;

COMMIT;
Using ROLLBACK:

sql
Copy code
START TRANSACTION;

UPDATE accounts
SET balance = balance - 100
WHERE account_id = 1;

-- Intentional error to cause rollback
UPDATE accounts
SET balance = balance + 100
WHERE account_id = 2 AND balance >= 0;  -- Assume condition fails

ROLLBACK;
Isolation Levels
Isolation levels define the degree to which the operations in one transaction are isolated from those in other concurrent transactions. They help manage concurrency and prevent issues like dirty reads, non-repeatable reads, and phantom reads.

Isolation Levels:

READ UNCOMMITTED:
Transactions can see uncommitted changes made by other transactions.

sql
Copy code
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
READ COMMITTED:
Transactions cannot see uncommitted changes made by other transactions.

sql
Copy code
SET TRANSACTION ISOLATION LEVEL READ COMMITTED;
REPEATABLE READ:
Ensures that if a transaction reads a row, it will see the same data if it reads that row again during the same transaction.

sql
Copy code
SET TRANSACTION ISOLATION LEVEL REPEATABLE READ;
SERIALIZABLE:
The highest isolation level, ensuring complete isolation from other transactions.

sql
Copy code
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
Example:
Set the isolation level to REPEATABLE READ:

sql
Copy code
SET TRANSACTION ISOLATION LEVEL REPEATABLE READ;

START TRANSACTION;

-- Some read operations
SELECT * FROM accounts WHERE account_id = 1;

-- Some write operations
UPDATE accounts SET balance = balance - 100 WHERE account_id = 1;

COMMIT;
Locking Mechanisms and Deadlocks
Locking Mechanisms:
Locks are used to control access to data in a multi-user environment. They ensure that multiple transactions do not interfere with each other.

Types of Locks:

Shared Lock (S):
Allows concurrent transactions to read a resource but not modify it.

sql
Copy code
SELECT * FROM accounts WHERE account_id = 1 LOCK IN SHARE MODE;
Exclusive Lock (X):
Prevents other transactions from reading or modifying the resource.

sql
Copy code
SELECT * FROM accounts WHERE account_id = 1 FOR UPDATE;
Deadlocks:
A deadlock occurs when two or more transactions hold locks and each transaction is waiting for the other to release its lock. 
This creates a cycle of dependencies and none of the transactions can proceed.

Handling Deadlocks:
Most databases automatically detect deadlocks and abort one of the transactions to break the cycle. The aborted transaction can be retried.

Example:
Consider two transactions leading to a deadlock:

Transaction A:

sql
Copy code
START TRANSACTION;
UPDATE accounts SET balance = balance - 100 WHERE account_id = 1;
-- Waiting for Transaction B to release lock on account_id = 2
Transaction B:

sql
Copy code
START TRANSACTION;
UPDATE accounts SET balance = balance + 100 WHERE account_id = 2;
-- Waiting for Transaction A to release lock on account_id = 1
Avoiding Deadlocks:

Access resources in a consistent order: Ensure all transactions access tables and rows in the same order.
Keep transactions short: Reduce the time locks are held by minimizing the number of operations in a transaction.
Use lower isolation levels: If appropriate, use lower isolation levels to reduce lock contention.
Example:

sql
Copy code
-- Transaction A
START TRANSACTION;
UPDATE accounts SET balance = balance - 100 WHERE account_id = 1;
UPDATE accounts SET balance = balance + 100 WHERE account_id = 2;
COMMIT;

-- Transaction B
START TRANSACTION;
UPDATE accounts SET balance = balance + 100 WHERE account_id = 2;
UPDATE accounts SET balance = balance - 100 WHERE account_id = 1;
COMMIT;


================================================================================================================================================================
================================================================================================================================================================

